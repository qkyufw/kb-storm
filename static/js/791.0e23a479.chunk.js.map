{"version":3,"file":"static/js/791.0e23a479.chunk.js","mappings":"2JAaO,MAAMA,EAGXC,WAAAA,CAAYC,GAAuB,KAF3BA,eAAS,EAGfC,KAAKD,UAAYA,CACnB,CAaA,6BAAME,CACJC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAEE,MAAMC,GAAcC,EAAAA,EAAAA,IAAwBR,EAAOC,EAAaC,GAEhE,IAAKK,GAAsC,eAAvBA,EAAYE,OAC9B,MAAO,CACLC,SAAS,EACTC,MAAO,8FAKX,MAAMC,EAASd,KAAKe,gCAAgCN,EAAaJ,GAG3DW,QAAmBhB,KAAKD,UAAUkB,YAAY,CAClDH,SACAI,aAAclB,KAAKmB,mCACnBC,UAAW,IACXd,YAAaA,GAAe,GAC5BC,OACAC,gBAGF,OAAKQ,EAAWJ,SAAYI,EAAWK,QAOhC,CACLT,SAAS,EACTU,KAAM,CACJb,YAAaO,EAAWK,UATnB,CACLT,SAAS,EACTC,MAAOG,EAAWH,OAAS,6BAWjC,CAAE,MAAOA,GAEP,OADAU,QAAQV,MAAM,wCAAWA,GAClB,CACLD,SAAS,EACTC,MAAOA,aAAiBW,MAAQX,EAAMY,QAAU,2BAEpD,CACF,CAKQV,+BAAAA,CACNN,EACAJ,GAoBA,MAfe,GAFSA,GAAqB,gMAK/CI,s7BAaA,CAKQU,gCAAAA,GACN,MAAO,8lCAWT,E","sources":["utils/ai/logicOrganizationService.ts"],"sourcesContent":["/**\r\n * 逻辑整理服务\r\n * 将视口内容导出为Mermaid，发送给AI进行逻辑整理，然后导入新的Mermaid图\r\n */\r\n\r\nimport { ICard, IConnection } from '../../types/CoreTypes';\r\nimport { AIService } from './aiService';\r\nimport { AIOperationResult, AIRole, AIOutputStyle } from '../../types/AITypes';\r\nimport { ViewportInfo, exportViewportToMermaid } from './viewportUtils';\r\n\r\n/**\r\n * 逻辑整理服务类\r\n */\r\nexport class LogicOrganizationService {\r\n  private aiService: AIService;\r\n\r\n  constructor(aiService: AIService) {\r\n    this.aiService = aiService;\r\n  }\r\n\r\n  /**\r\n   * 对视口内容进行逻辑整理\r\n   * @param cards 所有卡片数组\r\n   * @param connections 所有连接线数组\r\n   * @param viewportInfo 视口信息\r\n   * @param customDescription 用户自定义描述\r\n   * @param temperature 温度设置\r\n   * @param role AI角色设定\r\n   * @param outputStyle 输出风格设定\r\n   * @returns 整理操作结果\r\n   */\r\n  async organizeLogicInViewport(\r\n    cards: ICard[],\r\n    connections: IConnection[],\r\n    viewportInfo: ViewportInfo,\r\n    customDescription?: string,\r\n    temperature?: number,\r\n    role?: AIRole,\r\n    outputStyle?: AIOutputStyle\r\n  ): Promise<AIOperationResult> {\r\n    try {\r\n      // 导出视口内容为Mermaid\r\n      const mermaidCode = exportViewportToMermaid(cards, connections, viewportInfo);\r\n\r\n      if (!mermaidCode || mermaidCode.trim() === 'graph LR\\n') {\r\n        return {\r\n          success: false,\r\n          error: '当前视口范围内没有可导出的内容'\r\n        };\r\n      }\r\n\r\n      // 生成AI提示词\r\n      const prompt = this.generateLogicOrganizationPrompt(mermaidCode, customDescription);\r\n\r\n      // 发送AI请求\r\n      const aiResponse = await this.aiService.sendRequest({\r\n        prompt,\r\n        systemPrompt: this.getLogicOrganizationSystemPrompt(),\r\n        maxTokens: 3000, // 逻辑整理使用较多令牌以生成完整的Mermaid图\r\n        temperature: temperature || 0.4, // 逻辑整理使用中低温度保持逻辑性\r\n        role, // 传递角色设定\r\n        outputStyle // 传递输出风格\r\n      });\r\n\r\n      if (!aiResponse.success || !aiResponse.content) {\r\n        return {\r\n          success: false,\r\n          error: aiResponse.error || 'AI响应为空'\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: {\r\n          mermaidCode: aiResponse.content\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('逻辑整理失败:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : '未知错误'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成逻辑整理提示词\r\n   */\r\n  private generateLogicOrganizationPrompt(\r\n    mermaidCode: string,\r\n    customDescription?: string\r\n  ): string {\r\n    // 使用自定义描述或默认描述\r\n    const baseDescription = customDescription || '请对以下思维导图进行逻辑整理，优化结构和连接关系';\r\n\r\n    const prompt = `${baseDescription}：\r\n\r\n原始Mermaid图：\r\n${mermaidCode}\r\n\r\n整理要求：\r\n1. 分析节点之间的逻辑关系和层次结构\r\n2. 重新组织节点的连接关系，使逻辑更清晰\r\n3. 优化节点的排列顺序，突出主要流程和分支\r\n4. 保持所有原始信息的完整性和准确性\r\n5. 确保生成的Mermaid图语法正确且可渲染\r\n6. 可以调整连接线的方向和类型以更好地表达逻辑关系\r\n\r\n请直接返回整理后的Mermaid代码，不需要额外的解释或说明。确保代码以\"graph\"开头，格式正确。`;\r\n\r\n    return prompt;\r\n  }\r\n\r\n  /**\r\n   * 获取逻辑整理系统提示词\r\n   */\r\n  private getLogicOrganizationSystemPrompt(): string {\r\n    return `你是一个专业的逻辑分析和图表整理专家，擅长分析思维导图的结构并进行逻辑优化。你的任务是：\r\n1. 理解Mermaid思维导图中节点的含义和关系\r\n2. 分析节点之间的逻辑层次和依赖关系\r\n3. 重新组织图表结构，使逻辑流程更加清晰\r\n4. 优化连接关系，突出主要路径和分支逻辑\r\n5. 确保生成的Mermaid代码语法正确且可以正常渲染\r\n6. 保持原始信息的完整性，不添加或删除重要内容\r\n\r\n请始终返回有效的Mermaid代码，格式为：\r\ngraph LR\r\n  节点定义和连接关系...`;\r\n  }\r\n}\r\n"],"names":["LogicOrganizationService","constructor","aiService","this","organizeLogicInViewport","cards","connections","viewportInfo","customDescription","temperature","role","outputStyle","mermaidCode","exportViewportToMermaid","trim","success","error","prompt","generateLogicOrganizationPrompt","aiResponse","sendRequest","systemPrompt","getLogicOrganizationSystemPrompt","maxTokens","content","data","console","Error","message"],"sourceRoot":""}