{"version":3,"file":"static/js/523.246406e4.chunk.js","mappings":"oJAaO,MAAMA,EAGXC,WAAAA,CAAYC,GAAuB,KAF3BA,eAAS,EAGfC,KAAKD,UAAYA,CACnB,CAaA,oCAAME,CACJC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAEE,MAAMC,GAAcC,EAAAA,EAAAA,IAAwBR,EAAOC,EAAaC,GAEhE,IAAKK,GAAsC,eAAvBA,EAAYE,OAC9B,MAAO,CACLC,SAAS,EACTC,MAAO,8FAKX,MAAMC,EAASd,KAAKe,yBAAyBN,EAAaJ,GAGpDW,QAAmBhB,KAAKD,UAAUkB,YAAY,CAClDH,SACAI,aAAclB,KAAKmB,4BACnBC,UAAW,IACXd,YAAaA,GAAe,GAC5BC,OACAC,gBAGF,OAAKQ,EAAWJ,SAAYI,EAAWK,QAOhC,CACLT,SAAS,EACTU,KAAM,CACJC,aAAcP,EAAWK,UATpB,CACLT,SAAS,EACTC,MAAOG,EAAWH,OAAS,6BAWjC,CAAE,MAAOA,GAEP,OADAW,QAAQX,MAAM,oDAAaA,GACpB,CACLD,SAAS,EACTC,MAAOA,aAAiBY,MAAQZ,EAAMa,QAAU,2BAEpD,CACF,CAKQX,wBAAAA,CACNN,EACAJ,GAqBA,MAhBe,GAFSA,GAAqB,8TAK/CI,s5BAcA,CAKQU,yBAAAA,GACN,MAAO,wrCAUT,E","sources":["utils/ai/logicDraftService.ts"],"sourcesContent":["/**\r\n * 逻辑草稿服务\r\n * 将视口内容导出为Mermaid，发送给AI进行逻辑分析并生成草稿\r\n */\r\n\r\nimport { ICard, IConnection } from '../../types/CoreTypes';\r\nimport { AIService } from './aiService';\r\nimport { AIOperationResult, AIRole, AIOutputStyle } from '../../types/AITypes';\r\nimport { ViewportInfo, exportViewportToMermaid } from './viewportUtils';\r\n\r\n/**\r\n * 逻辑草稿服务类\r\n */\r\nexport class LogicDraftService {\r\n  private aiService: AIService;\r\n\r\n  constructor(aiService: AIService) {\r\n    this.aiService = aiService;\r\n  }\r\n\r\n  /**\r\n   * 基于视口内容的逻辑结构生成草稿\r\n   * @param cards 所有卡片数组\r\n   * @param connections 所有连接线数组\r\n   * @param viewportInfo 视口信息\r\n   * @param customDescription 用户自定义描述\r\n   * @param temperature 温度设置\r\n   * @param role AI角色设定\r\n   * @param outputStyle 输出风格设定\r\n   * @returns 草稿生成结果\r\n   */\r\n  async generateLogicDraftFromViewport(\r\n    cards: ICard[],\r\n    connections: IConnection[],\r\n    viewportInfo: ViewportInfo,\r\n    customDescription?: string,\r\n    temperature?: number,\r\n    role?: AIRole,\r\n    outputStyle?: AIOutputStyle\r\n  ): Promise<AIOperationResult> {\r\n    try {\r\n      // 导出视口内容为Mermaid\r\n      const mermaidCode = exportViewportToMermaid(cards, connections, viewportInfo);\r\n\r\n      if (!mermaidCode || mermaidCode.trim() === 'graph LR\\n') {\r\n        return {\r\n          success: false,\r\n          error: '当前视口范围内没有可导出的内容'\r\n        };\r\n      }\r\n\r\n      // 生成AI提示词\r\n      const prompt = this.generateLogicDraftPrompt(mermaidCode, customDescription);\r\n\r\n      // 发送AI请求\r\n      const aiResponse = await this.aiService.sendRequest({\r\n        prompt,\r\n        systemPrompt: this.getLogicDraftSystemPrompt(),\r\n        maxTokens: 4000, // 逻辑草稿使用更多令牌以生成完整文章\r\n        temperature: temperature || 0.7, // 逻辑草稿使用中等温度平衡逻辑性和创意性\r\n        role, // 传递角色设定\r\n        outputStyle // 传递输出风格\r\n      });\r\n\r\n      if (!aiResponse.success || !aiResponse.content) {\r\n        return {\r\n          success: false,\r\n          error: aiResponse.error || 'AI响应为空'\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: {\r\n          draftContent: aiResponse.content\r\n        }\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('逻辑草稿生成失败:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : '未知错误'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成逻辑草稿提示词\r\n   */\r\n  private generateLogicDraftPrompt(\r\n    mermaidCode: string,\r\n    customDescription?: string\r\n  ): string {\r\n    // 使用自定义描述或默认描述\r\n    const baseDescription = customDescription || '请基于以下思维导图的逻辑结构转化为结构化的草稿文章，并确保文章逻辑清晰、表达流畅';\r\n\r\n    const prompt = `${baseDescription}：\r\n\r\n思维导图（Mermaid格式）：\r\n${mermaidCode}\r\n\r\n生成要求：\r\n1. 分析思维导图中节点的逻辑关系和层次结构\r\n2. 理解连接线表示的流程、依赖或关联关系\r\n3. 按照图中的逻辑顺序组织文章结构\r\n4. 将节点内容转化为连贯的段落和章节\r\n5. 保持原始逻辑关系的完整性和准确性\r\n6. 补充必要的过渡语句和逻辑连接\r\n7. 使用Markdown格式输出，包含适当的标题层级\r\n\r\n请直接输出完整的草稿文章，不需要额外的解释或说明。`;\r\n\r\n    return prompt;\r\n  }\r\n\r\n  /**\r\n   * 获取逻辑草稿系统提示词\r\n   */\r\n  private getLogicDraftSystemPrompt(): string {\r\n    return `你是一个专业的逻辑分析和文档写作专家，擅长理解思维导图的结构并转化为结构化文章。你的任务是：\r\n1. 深入理解Mermaid思维导图中的逻辑关系和层次结构\r\n2. 识别图中的主要流程、分支逻辑和关键节点\r\n3. 按照图表的逻辑顺序组织文章内容\r\n4. 将图形化的信息转化为连贯的文字表达\r\n5. 保持原始逻辑关系的准确性和完整性\r\n6. 生成结构清晰、逻辑严密的草稿文章\r\n7. 使用适当的Markdown格式进行排版\r\n\r\n请始终基于思维导图的逻辑结构来组织文章，确保文章的逻辑性和可读性。`;\r\n  }\r\n}\r\n"],"names":["LogicDraftService","constructor","aiService","this","generateLogicDraftFromViewport","cards","connections","viewportInfo","customDescription","temperature","role","outputStyle","mermaidCode","exportViewportToMermaid","trim","success","error","prompt","generateLogicDraftPrompt","aiResponse","sendRequest","systemPrompt","getLogicDraftSystemPrompt","maxTokens","content","data","draftContent","console","Error","message"],"sourceRoot":""}